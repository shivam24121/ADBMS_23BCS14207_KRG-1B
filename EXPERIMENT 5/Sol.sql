-- medium --

CREATE TABLE TRANSACTION_DATA (
    ID NUMBER,
    VALUE NUMBER
);

INSERT INTO TRANSACTION_DATA (ID, VALUE)
SELECT 1, ROUND(DBMS_RANDOM.VALUE(0,100),2)
FROM DUAL
CONNECT BY LEVEL <= 1000000;

INSERT INTO TRANSACTION_DATA (ID, VALUE)
SELECT 2, ROUND(DBMS_RANDOM.VALUE(0,100),2)
FROM DUAL
CONNECT BY LEVEL <= 1000000;

COMMIT;

CREATE OR REPLACE VIEW SALES_SUMMARY AS
SELECT 
    ID,
    COUNT(*) AS TOTAL_QUANTITY_SOLD,
    SUM(VALUE) AS TOTAL_SALES,
    COUNT(DISTINCT ID) AS TOTAL_ORDERS
FROM TRANSACTION_DATA
GROUP BY ID;

CREATE MATERIALIZED VIEW SALES_SUMMARY_MV
BUILD IMMEDIATE
REFRESH COMPLETE ON DEMAND
AS
SELECT 
    ID,
    COUNT(*) AS TOTAL_QUANTITY_SOLD,
    SUM(VALUE) AS TOTAL_SALES,
    COUNT(DISTINCT ID) AS TOTAL_ORDERS
FROM TRANSACTION_DATA
GROUP BY ID;

SELECT * FROM SALES_SUMMARY;
SELECT * FROM SALES_SUMMARY_MV;

EXEC DBMS_MVIEW.REFRESH('SALES_SUMMARY_MV');


-- hard --

CREATE TABLE TRANSACTION_DATA (
    ID NUMBER,
    VALUE NUMBER
);

INSERT INTO TRANSACTION_DATA (ID, VALUE)
SELECT 1, ROUND(DBMS_RANDOM.VALUE(0,100),2)
FROM DUAL
CONNECT BY LEVEL <= 100000;

INSERT INTO TRANSACTION_DATA (ID, VALUE)
SELECT 2, ROUND(DBMS_RANDOM.VALUE(0,100),2)
FROM DUAL
CONNECT BY LEVEL <= 100000;

COMMIT;

CREATE OR REPLACE VIEW SALES_SUMMARY AS
SELECT 
    ID,
    COUNT(*) AS TOTAL_QUANTITY_SOLD,
    SUM(VALUE) AS TOTAL_SALES,
    COUNT(DISTINCT ID) AS TOTAL_ORDERS
FROM TRANSACTION_DATA
GROUP BY ID;

CREATE USER REPORT_USER IDENTIFIED BY Report123;

GRANT CREATE SESSION TO REPORT_USER;

GRANT SELECT ON SALES_SUMMARY TO REPORT_USER;

REVOKE SELECT ON TRANSACTION_DATA FROM REPORT_USER;

SELECT * FROM SALES_SUMMARY;

EXEC DBMS_MVIEW.REFRESH('SALES_SUMMARY');
